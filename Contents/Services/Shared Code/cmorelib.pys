import re, datetime 

ICON = 'icon-default.png'

def Login(ReLogin=False):
    try:
        return DoLogin(ReLogin)
    except Exception as e:
        Log("JTDEBUG DoLogin Failed: %s" % e)
        raise e
    

def DoLogin(ReLogin=False):

    status_url, login_url, params = GetLoginParameters()
    status_cookie = HTTP.CookiesForURL(status_url)
    Log("JTDEBUG status_cookie: %r" % status_cookie)
    status_headers={}
    try:
        login_cookie = HTTP.CookiesForURL(login_url)
        if not status_cookie and login_cookie:
            Log("JTDEBUG using login_cookie as status_cookie")
            status_headers={'Cookie':login_cookie}
    except Exception as e:
        pass
    if ReLogin or not IsLoginOk(JSON.ObjectFromURL(url=status_url, headers=status_headers, cacheTime=0)):
        login_result = HTTP.Request(url=login_url, values=params, cacheTime=0).content
        if not IsLoginOk(JSON.ObjectFromString(login_result)):
            Log("JTDEBUG Login Failed: %r" % login_result)
            raise Exception("Login Failed: %r" % login_result)
        else:
            Log("JTDEBUG login cookies %r" % HTTP.CookiesForURL(login_url))
            return HTTP.CookiesForURL(login_url)

    return HTTP.CookiesForURL(status_url)

def IsLoginOk(json_result):
    if 'response' in json_result:
        code = json_result['response']['code']
        return code == 'AUTHENTICATION_OK' or code == 'SESSION_AUTHENTICATED'
    elif 'Status' in json_result:
        return json_result['Status']['Code'] == 0
    return False

def GetLoginParameters():
    if Prefs['operator'] and Prefs['operator'] != "":
        for variant in GetOperator():
            try:
                operator = variant
                status, url, params = GetOperatorLoginParams(operator,"user","password")
                HTTP.Request(url=url, values=params).content
                break
            except:
                pass
        return GetOperatorLoginParams(operator,Prefs['username'],Prefs['password'])
    else:
        status_url = "https://middleware2sams.cmore.se/dispatch/restapi-internal.cmore.se/api/authentication/user.json"
        login_url = "https://middleware2sams.cmore.se/dispatch/restapi-internal.cmore.se/api/authentication/user/login.json"
        params = {'username': Prefs['username'],'password': Prefs['password'], 'rememberMe': "false"}
        return status_url, login_url, params

def GetOperatorLoginParams(operator, user, password):
    status_url = "https://middleware2sams.cmore.se/dispatch/restapi-internal.cmore.se/api/authentication/user.json"
    # I suspect it should be 
    # status_url = "https://middleware2sams.cmore.se/dispatch/authenticate.cmore.se/api/user/1/%s/%s" % (operator, Prefs['site'].upper())
    login_url = "https://middleware2sams.cmore.se/dispatch/authenticate.cmore.se/api/user/1/%s/%s/%s/%s" % (operator, Prefs['site'].upper(), String.Quote(user), String.Quote(password))
    return status_url, login_url, None

def GetOperator():
    url = "http://middleware2sams.cmore.se/dispatch/authenticate.cmore.se/api/operators/1/%s/%s" % (Prefs['site'].upper(), Prefs['site'].upper())
    # operators = JSON.ObjectFromURL(url=url, headers={'Accept':"application/json"})
    configured = Prefs['operator'].lower()
    available_operators = []
    for operator in JSON.ObjectFromURL(url=url)['Items']:
        available_operators.append(operator['Name'])
        if operator['Title'].lower() == configured or operator['Name'].lower() == configured:
            return operator['Name'], operator['Title']
    Log("JTDEBUG - operator not found - invalid configuration? Operator: '%s'" % Prefs['operator'])
    Log("JTDEBUG - Available Operators are: %s" % ','.join(available_operators))
    return Prefs['operator'], Prefs['operator']

def MakeVideoObject(url, item):
    thumb = R(ICON)
    try:
        duration = int(item['duration'])*60*1000
    except:
        duration = None

    if 'metadata' in item and 'homeTeamImage' in item['metadata']:
        thumb = item['metadata']['homeTeamImage']
    if not thumb and 'imageUrl' in item:
        thumb = item['imageUrl']

    # If called from ServiceCode url is already fixed...
    if re.search("/sport/[0-9]+/", url):
        url = re.sub("/sport/[0-9]+/", "/%s/" % item['id'], url)
    elif re.search("/channels/[\-0-9]+/", url):
        url = re.sub("/channels/[\-0-9]+/", "/asset/%s/" % item['id'], url)

    return VideoClipObject(title    = AddEpgInfo(item['title'], item),
                           thumb    = thumb,
                           url      = url,
                           duration = duration,
                           )

def AddEpgInfo(title, item):
    try:
        now = datetime.datetime.now()
        start_time = datetime.datetime.fromtimestamp(item['liveBroadcastTime']/1000.)
        if 'expireDate' in item and item['expireDate']:
            end_time = datetime.datetime.fromtimestamp(item['expireDate']/1000.)
        else:
            end_time = None

        if start_time < now and (not end_time or now < end_time):
            epg = "Now"
        elif end_time and now > end_time:
            epg = "Ended %s" % end_time.strftime('%H:%M')
        else:
            if start_time.strftime('%Y%m%d') == now.strftime('%Y%m%d'):
                # Today
                epg = start_time.strftime('%H:%M')
            elif (start_time.timetuple().tm_yday - now.timetuple().tm_yday) < 7:
                # Within a week
                epg = start_time.strftime('%A %H:%M')
            else:
                epg = start_time.strftime('%b %d %H:%M')

        return '%s: %s' % (epg, title)
    except Exception as e:
        Log("JTDEBUG AddEpgInfo failed for title:%s item:%r failed:%s " % (title, item, e))
        pass
    return title
