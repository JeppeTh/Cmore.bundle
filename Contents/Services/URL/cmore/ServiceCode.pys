import re

from cmorelib import Login as Login
from cmorelib import MakeVideoObject as MakeVideoObject

RE_HLS_VERSION = Regex('EXT-X-VERSION *: *([0-9]+)')

####################################################################################################
def MetadataObjectForURL(url):
    try:
        return MakeVideoObject(url, JSON.ObjectFromURL(url)['result'])
    except Exception as e:
        Log("JTDEBUG MakeVideoObject failed:%s" %e)
        return VideoClipObject()

####################################################################################################
@deferred
def MediaObjectsForURL(url):

    stream_url = GetStream(url)
    streams    = GetHlsStreams(stream_url)
    
    if UseMasterPlaylist(streams[0]['url']):
        stream = {}
        stream['url']        = Callback(FixHlsLanguage, url=stream_url)
        stream['bitrate']    = None
        stream['resolution'] = None
        streams = [stream]

    mo = []
    for s in streams:
        Log("JTDEBUG stream:%r" % s['url'])
        mo.append(
            MediaObject(
                parts = [PartObject(key=HTTPLiveStreamURL(s['url']))],
                audio_channels = 2,
                video_resolution = s['resolution'],
                optimized_for_streaming = True,
                bitrate = s['bitrate']
                )
            )
    return mo

####################################################################################################
def UseMasterPlaylist(url):
    if Prefs['playerDecideBitRate']:
        return True
    ## Check if version is > 3
    playlist = HTTP.Request(url).content
    ## Must use master in case > version 3
    return int(RE_HLS_VERSION.search(playlist).group(1)) > 3

####################################################################################################
def FixHlsLanguage(url, **kwargs):
   url_params = re.sub(".+(\.m3u8.*)","\\1", url)
   playlist = HTTP.Request(url).content
   # Remove unused Languages
   preferred_language = "NAME=\"%s\"" % GetLanguage()
   other_audio = None
   preferred_audio = None
   if preferred_language in playlist:
       for audio in re.findall("^.+TYPE=AUDIO.+NAME=.+$", playlist, re.M):
           if not preferred_language in audio:
               playlist = re.sub(audio+"\\r?\\n", "", playlist)
               if "DEFAULT=YES" in audio:
                   other_audio = re.sub('.+URI="([^"]+)".*', "\\1", audio)
           elif "URI" in audio:
               preferred_audio = re.sub('.+URI="([^"]+)".*', "\\1", audio)
   if other_audio and preferred_audio:
       playlist = re.sub(other_audio, preferred_audio, playlist)
       playlist = re.sub("DEFAULT=NO", "DEFAULT=YES", playlist)
       
   prefix = re.sub("/[^/]+\.m3u8.*$", "/", url)
   for stream in re.findall("^[^#]+\.m3u8.*$", playlist, re.M):
       # Add http-prefix if missing
       if not "http" in stream:
           playlist = re.sub(stream, prefix+stream, playlist)
   for stream in re.findall('("([^"]+\.m3u8)")', playlist, re.M):
       # Add http-prefix if missing
       if not "http" in stream[1]:
           playlist = re.sub(stream[0], '"%s"' % (prefix+stream[1]), playlist)
   # Add url-params
   playlist = re.sub("\.m3u8", url_params, playlist)

   return playlist

####################################################################################################
def GetLanguage():
    if Prefs['site'].lower() == "se":
        return "sve"
    elif Prefs['site'].lower() == "no":
        return "nor"
    else:
        return "dan"

####################################################################################################
def GetStream(org_url):
    try:
        login_cookie = Login()
        url = "http://middleware2sams.cmore.se/dispatch/restapi-internal.cmore.se/api/web/asset/%s/play.json" % re.findall("asset/([0-9]+)/", org_url)[0]
        try:
            playback_cookie = HTTP.CookiesForURL(url)
        except:
            playback_cookie = None
            pass

        if playback_cookie:
            playback_headers = {}
            Log("JTDEBUG using cookie for playback:%r" % playback_cookie)
        elif login_cookie:
            Log("JTDEBUG using login_cookie for playback:%r" % login_cookie)
            playback_headers={'Cookie':login_cookie}
        json = JSON.ObjectFromURL(url=url, headers=playback_headers)
        if 'playback' in json and json['playback']['playbackStatus'] == "OK":
            for item in json['playback']['items']['item']:
                video_url = item['url']
                if ".m3u8" in video_url:
                    return video_url
        elif 'playback' in json:
            raise Ex.LiveMediaNotStarted

    except Ex.LiveMediaNotStarted as e:
        Log("JTDEBUG NOT_STARTED:%s" % e)
        raise e
                
    except Exception as e:
        Log("JTDEBUG GetStream Exception:%s" % e)
        pass
    raise Ex.MediaNotAvailable

####################################################################################################
def GetHlsStreams(hlsUrl):

    url_params = re.sub(".+(\.m3u8.*)","\\1", hlsUrl) 

    streams = []
    Found   = True  
    
    try: 
        pageElement = HTML.ElementFromURL(hlsUrl)
    except:
        Found = False
        
    if Found:
        streamSpec      = pageElement.xpath("text()")[0]
        anyResolution   = re.search('(?<=RESOLUTION=)[0-9]+x[0-9]+', streamSpec)
        streamSpecLines = streamSpec.splitlines()
    
        path = hlsUrl[ : hlsUrl.split("?")[0].rfind('/') + 1]
    
        # Parse the m3u8 file to get:
        # - URL
        # - Resolution
        # - Bitrate
        stream = {}
        for line in streamSpecLines:
            # Log("[JTDEBUG] line:%s" % line)
            if "TYPE=SUBTITLES" in line:
                continue
            if "BANDWIDTH" in line:
                bwm = re.search('(?<=BANDWIDTH=)[0-9]+', line)
        
                stream["bitrate"] = int(int(bwm.group(0))/1024)
                # Log("[JTDEBUG] bitrate:%s" % stream["bitrate"])
        
                if "RESOLUTION" in line:
                    rnm                  = re.search('(?<=RESOLUTION=)[0-9]+x[0-9]+', line)
                    stream["resolution"] = int(rnm.group(0).split("x")[1])
                else:
                    stream["resolution"] = 0

                # Log("[JTDEBUG] resolution:%s" % stream["resolution"])
            
            elif ".m3u8" in line and "bitrate" in stream:
                if not line.startswith("http"):
                   stream["url"] = path + line
                else:
                   stream["url"] = line
                if stream["url"].endswith(".m3u8"):
                    # Add url params
                    stream["url"] = re.sub("\.m3u8", url_params, stream["url"])
                # Log("[JTDEBUG] url:%s" % stream["url"])
                # Avoid audio only streams
                if stream["resolution"] > 0 or not anyResolution:
                    streams.append(stream)
                stream = {}

    sorted_streams = sorted(streams, key = lambda stream: stream["bitrate"], reverse = True)

    return sorted_streams

####################################################################################################
def NormalizeURL(url):
    return url
